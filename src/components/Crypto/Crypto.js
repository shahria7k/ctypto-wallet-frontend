import { Button, Card, Col, Form } from "react-bootstrap";
import { useState, useEffect } from "react";
import { Line } from "react-chartjs-2";
import { faExchangeAlt } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
const Crypto = (props) => {
	const {
		image,
		name,
		current_price,
		symbol,
		circulating_supply,
		max_supply,
		price_change_24h,
	} = props.data;

	const [amount, setAmount] = useState(10);
	const [input, setInput] = useState(10);
	const query = props.data.id;
	const [chartData, setChartData] = useState([
		[1632114599216, 45862.9028484503],
		[1632118392723, 45754.59981403329],
		[1632121432993, 45761.01796067784],
		[1632125027541, 44798.81941920668],
		[1632128554542, 45144.655849528106],
		[1632132263026, 44892.37139548167],
		[1632136111808, 44515.311121179104],
		[1632139890892, 43863.779058376305],
		[1632142974450, 43569.76615102906],
		[1632146650252, 44152.53182361778],
		[1632150262775, 43876.60525970275],
		[1632153880793, 43813.731566660805],
		[1632157435755, 43890.99105289481],
		[1632160998576, 44149.225339288496],
		[1632165025831, 43460.42630909364],
		[1632168430303, 44064.33969737669],
		[1632171665064, 43358.7169961264],
		[1632175381442, 43637.628044500336],
		[1632178970626, 43247.99558379875],
		[1632182587445, 43016.73831875625],
		[1632186258938, 41815.48971532072],
		[1632189812259, 42743.83856933357],
		[1632193451289, 43116.811223879726],
		[1632197264592, 42834.211041849616],
		[1632200975013, 42563.088495784395],
		[1632204270884, 42685.87769322545],
		[1632207757218, 42956.43196133235],
		[1632211468211, 43574.79557216792],
		[1632215301083, 43365.65037813085],
		[1632218778514, 43254.94697126729],
		[1632222274508, 43645.260006918186],
		[1632225745348, 43457.35953413674],
		[1632229397783, 43383.65653359193],
		[1632233022532, 43304.99855339429],
		[1632236692104, 42393.01730028641],
		[1632240225734, 43164.455269198595],
		[1632243717592, 42569.31912514665],
		[1632247470591, 41585.94928004626],
		[1632251018027, 42311.2891122657],
		[1632254493696, 42160.87148126717],
		[1632258241072, 40902.94847836109],
		[1632261877611, 41686.152886148295],
		[1632265750587, 40639.95280512273],
		[1632269038489, 40554.38379228072],
		[1632273532222, 41794.7144288495],
		[1632276257052, 42304.3556965829],
		[1632279658853, 42161.358703177146],
		[1632283725920, 42116.09935596237],
		[1632286876960, 41980.086972005374],
		[1632290696471, 42001.3532520263],
		[1632294198149, 42351.73034183574],
		[1632297810776, 42913.52664515141],
		[1632301253067, 42417.41460858455],
		[1632305133741, 42456.20525943924],
		[1632308604512, 42117.04074889203],
		[1632312549640, 42061.21068933014],
		[1632315702902, 42275.32766729979],
		[1632319409529, 42362.672340094505],
		[1632323298532, 42514.543796509075],
		[1632326665880, 43322.04053273302],
		[1632330284052, 43461.6671195924],
		[1632333891916, 43340.558985771604],
		[1632337775606, 43207.64225801049],
		[1632341244348, 43501.51374321222],
		[1632344948376, 43417.665765303114],
		[1632348239459, 43232.03984403921],
		[1632351740731, 43583.393706651696],
		[1632355699210, 43602.016388122596],
		[1632359078084, 43203.16596444922],
		[1632362823604, 43832.1788310668],
		[1632366546227, 43705.42182230742],
		[1632369755522, 44048.27702407887],
		[1632373407541, 44100.70842850083],
		[1632377020524, 43985.04005630545],
		[1632380668593, 44323.02096130352],
		[1632384120840, 44328.69754648467],
		[1632387628070, 44033.66154289334],
		[1632391676366, 44138.82052565484],
		[1632395031587, 43935.53596186918],
		[1632398669100, 43631.95122585565],
		[1632402455212, 43682.930011469274],
		[1632405780793, 44236.62120536244],
		[1632409912712, 44331.57958755895],
		[1632413365544, 43933.485919765],
		[1632416968494, 44059.26399222565],
		[1632420501386, 45026.37474527883],
		[1632423812880, 44850.471473872465],
		[1632427777015, 44890.33456899873],
		[1632431323995, 44838.50545905689],
		[1632434877864, 44876.17888504732],
		[1632438184216, 45167.71370320127],
		[1632442140825, 44990.29733790286],
		[1632446531877, 44828.25858311178],
		[1632449002321, 44741.74333699415],
		[1632452600015, 44510.79626539845],
		[1632456229561, 44386.630187273506],
		[1632459831323, 44382.81669259921],
		[1632463870329, 44330.68641664942],
		[1632466868559, 44306.117732057784],
		[1632471088723, 45083.06445479632],
		[1632474468976, 44464.921704832115],
		[1632477995855, 42622.338831300534],
		[1632481322344, 42213.168577599194],
		[1632485146904, 41518.44066650331],
		[1632488645339, 41040.874377452266],
		[1632492258539, 41926.914990883604],
		[1632495892213, 42570.532866201036],
		[1632499453091, 41818.62952845138],
		[1632502884290, 42339.87094021984],
		[1632506614108, 42085.9730484026],
		[1632510120639, 42245.51796323609],
		[1632513859138, 42399.21614575606],
		[1632517426515, 43118.74286157322],
		[1632521326621, 43040.24136972522],
		[1632524697079, 43185.54008852932],
		[1632528120896, 42865.02476466266],
		[1632531808543, 42829.338520909936],
		[1632535717222, 42602.50322853938],
		[1632538821049, 42516.183213851924],
		[1632542723018, 42819.170280430946],
		[1632546179159, 42837.70859510352],
		[1632549835519, 42694.89917085877],
		[1632553650332, 42863.703031537414],
		[1632557037780, 42535.1961264815],
		[1632560674770, 42326.79796511596],
		[1632564033053, 42754.01706586941],
		[1632568037255, 42694.5426788561],
		[1632571475768, 42575.279305462514],
		[1632575241682, 42446.42530462917],
		[1632578429241, 42659.80593565454],
		[1632582579987, 42450.07771013847],
		[1632585615675, 42806.42500235675],
		[1632589382555, 42764.53200131598],
		[1632593183971, 42757.124424669055],
		[1632597120819, 42701.759003772255],
		[1632600481843, 42769.76987470343],
		[1632603858771, 42869.3576018896],
		[1632607670289, 42835.78302127842],
		[1632611016162, 42891.64583522206],
		[1632614829394, 42777.716224002696],
		[1632618010975, 42434.13140658143],
		[1632621789733, 42307.98645830627],
		[1632625318435, 42212.33715315647],
		[1632628944734, 42190.71253966418],
		[1632632588224, 42418.35444896714],
		[1632636028583, 42215.663179682924],
		[1632639768509, 42088.342988002136],
		[1632643357113, 40930.06563922296],
		[1632647307371, 41670.518829836015],
		[1632650648909, 43852.79520523424],
		[1632654284129, 43180.26465998335],
		[1632657710033, 43227.98018556405],
		[1632661304116, 43361.15495192083],
		[1632665020463, 43286.31491798299],
		[1632668651067, 43430.45855047257],
		[1632672144402, 43513.955375557765],
		[1632675714212, 43370.137850846244],
		[1632679359943, 43256.17950734409],
		[1632682939272, 43349.14431525951],
		[1632686507736, 43425.66728602049],
		[1632690026503, 43673.57143121867],
		[1632693798930, 43644.345877313324],
		[1632697649451, 43087.02144443022],
		[1632700854823, 43336.861233242744],
		[1632704403273, 43890.92814242138],
		[1632708128535, 44346.56342448931],
		[1632711814234, 44262.68583595872],
		[1632715388846, 44034.18161990108],
		[1632718923893, 44032.649990251746],
		[1632719149000, 44160.380557666416],
	]);
	useEffect(
		() => {
			fetch(
				`https://api.coingecko.com/api/v3/coins/${query}/market_chart?vs_currency=usd&days=7&interval=hourly`
			)
				.then((res) => res.json())
				.then((data) => data.prices)
				.then((sortedPrice) => setChartData(sortedPrice));
		},
		// eslint-disable-next-line react-hooks/exhaustive-deps
		[]
	);

	// CHart
	const skipped = (ctx, value) =>
		ctx.p0.skip || ctx.p1.skip ? value : undefined;
	const down = (ctx, value) =>
		ctx.p0.parsed.y > ctx.p1.parsed.y ? value : undefined;
	const genericOptions = {
		fill: false,
		interaction: {
			intersect: false,
		},
		plugins: {
			legend: {
				display: false,
				labels: {
					color: "rgb(255, 99, 132)",
				},
			},
		},
		scales: {
			x: {
				display: false,
			},
		},
		radius: 0,
	};

	return (
		<Col lg="4">
			<Card
				text="white"
				className="mb-2 w-100 bg-transparent"
				style={{ position: "relative" }}
			>
				<img
					src={image}
					alt=""
					style={{
						position: "absolute",
						top: "-25px",
						left: "50px",
						width: "50px",
					}}
				/>
				<Card.Header className="d-flex flex-column justify-content-center align-items-center p-5 bg-dark">
					<Line
						data={{
							labels: [
								...chartData.map((item) => new Date(item[0]).toUTCString()),
							],
							datasets: [
								{
									label: "USD$ ",
									data: chartData,
									borderColor: "rgb(75, 192, 192)",
									borderWidth: "1",
									segment: {
										borderColor: (ctx) =>
											skipped(ctx, "rgb(0,0,0,0.2)") ||
											down(ctx, "rgb(192,75,75)"),
										borderDash: (ctx) => skipped(ctx, [6, 6]),
									},
								},
							],
						}}
						options={genericOptions}
						height={150}
						width={300}
					></Line>
					<Card.Title className="mt-3 w-100 text-start">{name}</Card.Title>
					<small className="text-muted">
						Current Price {current_price}$ / {name}
					</small>
					<br />
					<small className="text-muted">
						Circulating Supply {circulating_supply}
					</small>
					<br />
					<small className="text-muted">Max Supply {max_supply}</small>
					<br />
					<small className="text-muted">
						Price Change in 24h {price_change_24h}
					</small>
					<br />
				</Card.Header>
				<Card.Body className="bg-dark d-flex justify-content-center align-items-center">
					<Form.Control
						size="md"
						type="number"
						placeholder="amount in USD"
						className="me-3"
						onInput={(event) => {
							if (typeof parseInt(event.target.value) === "number") {
								setInput(event.target.value);
								setAmount(event.target.value);
							}
						}}
						value={input}
					/>
					<Button
						className="px-2"
						variant="secondary"
						style={{ width: "120px" }}
						onClick={
							parseInt(amount) > 0
								? async () => {
										const confirmation = await window.confirm(
											`Are you sure you want to buy ${
												current_price / amount
											} ${name} for ${amount}$?`
										);
										return props.updateUserWallet(symbol, amount, name);
								  }
								: () => {
										console.log(amount);
										console.log("empty");
								  }
						}
					>
						<FontAwesomeIcon
							icon={faExchangeAlt}
							style={{ fontSize: "1em" }}
							className="mx-1"
						/>
						Trade
					</Button>
				</Card.Body>
				<Card.Footer className="bg-dark mt-0 p-4"></Card.Footer>
			</Card>
		</Col>
	);
};

export default Crypto;
